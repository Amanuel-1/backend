generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Vendor    Vendor?
  Seller    Seller?
  Order     Order[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Vendor {
  id         String    @id @default(cuid())
  vendorId   String    @unique
  user       User      @relation(fields: [vendorId], references: [id])
  email      String    @unique
  password   String
  vendorName String?
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Seller {
  id        String    @id @default(cuid())
  sellerid  String    @unique
  user      User      @relation(fields: [sellerid], references: [id])
  email     String    @unique
  phone     String?
  products  Product[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String
  photos      Json
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Seller      Seller?  @relation(fields: [sellerId], references: [id])
  sellerId    String?
  sales       Sales[]
}

model Order {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  sellerId        String
  seller          Seller   @relation(fields: [sellerId], references: [id])
  deliveryAddress String
  quantity        Int
  price           Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Credentials {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sales {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
